// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
struct DataOneofInstance {
  const ::Chat* chat_;
  const ::Login* login_;
  const ::Logout* logout_;
  const ::Ack* ack_;
  const ::Ping* ping_;
  const ::Pong* pong_;
}* Data_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Chat_ChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ack_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pong_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Data_descriptor_ = file->message_type(0);
  static const int Data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, datatype_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, chat_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, login_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, logout_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, ack_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Data_default_oneof_instance_, pong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, dataBody_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::internal_default_instance(),
      Data_offsets_,
      -1,
      -1,
      -1,
      Data_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _oneof_case_[0]),
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_));
  Data_DataType_descriptor_ = Data_descriptor_->enum_type(0);
  Chat_descriptor_ = file->message_type(1);
  static const int Chat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, ext_),
  };
  Chat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Chat_descriptor_,
      Chat::internal_default_instance(),
      Chat_offsets_,
      -1,
      -1,
      -1,
      sizeof(Chat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _internal_metadata_));
  Chat_ChatType_descriptor_ = Chat_descriptor_->enum_type(0);
  Login_descriptor_ = file->message_type(2);
  static const int Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, form_),
  };
  Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Login_descriptor_,
      Login::internal_default_instance(),
      Login_offsets_,
      -1,
      -1,
      -1,
      sizeof(Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_));
  Logout_descriptor_ = file->message_type(3);
  static const int Logout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, form_),
  };
  Logout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Logout_descriptor_,
      Logout::internal_default_instance(),
      Logout_offsets_,
      -1,
      -1,
      -1,
      sizeof(Logout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_));
  Ack_descriptor_ = file->message_type(4);
  static const int Ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, status_),
  };
  Ack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ack_descriptor_,
      Ack::internal_default_instance(),
      Ack_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _internal_metadata_));
  Ack_Status_descriptor_ = Ack_descriptor_->enum_type(0);
  Ping_descriptor_ = file->message_type(5);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, pingtime_),
  };
  Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ping_descriptor_,
      Ping::internal_default_instance(),
      Ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_));
  Pong_descriptor_ = file->message_type(6);
  static const int Pong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, pingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, pongtime_),
  };
  Pong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pong_descriptor_,
      Pong::internal_default_instance(),
      Pong_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, Data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Chat_descriptor_, Chat::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Login_descriptor_, Login::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Logout_descriptor_, Logout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ack_descriptor_, Ack::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ping_descriptor_, Ping::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pong_descriptor_, Pong::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  Data_default_instance_.Shutdown();
  delete Data_default_oneof_instance_;
  delete Data_reflection_;
  Chat_default_instance_.Shutdown();
  delete Chat_reflection_;
  Login_default_instance_.Shutdown();
  delete Login_reflection_;
  Logout_default_instance_.Shutdown();
  delete Logout_reflection_;
  Ack_default_instance_.Shutdown();
  delete Ack_reflection_;
  Ping_default_instance_.Shutdown();
  delete Ping_reflection_;
  Pong_default_instance_.Shutdown();
  delete Pong_reflection_;
}

void protobuf_InitDefaults_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Data_default_instance_.DefaultConstruct();
  Data_default_oneof_instance_ = new DataOneofInstance();
  ::google::protobuf::internal::GetEmptyString();
  Chat_default_instance_.DefaultConstruct();
  Login_default_instance_.DefaultConstruct();
  Logout_default_instance_.DefaultConstruct();
  Ack_default_instance_.DefaultConstruct();
  Ping_default_instance_.DefaultConstruct();
  Pong_default_instance_.DefaultConstruct();
  Data_default_instance_.get_mutable()->InitAsDefaultInstance();
  Chat_default_instance_.get_mutable()->InitAsDefaultInstance();
  Login_default_instance_.get_mutable()->InitAsDefaultInstance();
  Logout_default_instance_.get_mutable()->InitAsDefaultInstance();
  Ack_default_instance_.get_mutable()->InitAsDefaultInstance();
  Ping_default_instance_.get_mutable()->InitAsDefaultInstance();
  Pong_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_message_2eproto_once_);
void protobuf_InitDefaults_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_message_2eproto_once_,
                 &protobuf_InitDefaults_message_2eproto_impl);
}
void protobuf_AddDesc_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\214\002\n\004Data\022 \n\010dataType\030\001 \001"
    "(\0162\016.Data.DataType\022\025\n\004chat\030\002 \001(\0132\005.ChatH"
    "\000\022\027\n\005login\030\003 \001(\0132\006.LoginH\000\022\031\n\006logout\030\004 \001"
    "(\0132\007.LogoutH\000\022\023\n\003ack\030\005 \001(\0132\004.AckH\000\022\025\n\004pi"
    "ng\030\006 \001(\0132\005.PingH\000\022\025\n\004pong\030\007 \001(\0132\005.PongH\000"
    "\"H\n\010DataType\022\010\n\004Chat\020\000\022\t\n\005Login\020\001\022\n\n\006Log"
    "out\020\002\022\007\n\003Ack\020\003\022\010\n\004Ping\020\004\022\010\n\004Pong\020\005B\n\n\010da"
    "taBody\"\235\001\n\004Chat\022\n\n\002id\030\001 \001(\003\022\014\n\004form\030\002 \001("
    "\003\022\n\n\002to\030\003 \001(\003\022\014\n\004type\030\004 \001(\005\022 \n\010chatType\030"
    "\005 \001(\0162\016.Chat.ChatType\022\017\n\007content\030\006 \001(\t\022\013"
    "\n\003ext\030\007 \001(\t\"!\n\010ChatType\022\n\n\006Single\020\000\022\t\n\005G"
    "roup\020\001\"!\n\005Login\022\n\n\002id\030\001 \001(\003\022\014\n\004form\030\002 \001("
    "\003\"\"\n\006Logout\022\n\n\002id\030\001 \001(\003\022\014\n\004form\030\002 \001(\003\"\264\001"
    "\n\003Ack\022\r\n\005msgId\030\001 \001(\003\022\014\n\004from\030\002 \001(\003\022\n\n\002to"
    "\030\003 \001(\003\022\033\n\006status\030\004 \001(\0162\013.Ack.Status\"g\n\006S"
    "tatus\022\013\n\007Receive\020\000\022\n\n\006Accept\020\001\022\010\n\004Read\020\002"
    "\022\014\n\010LoginSuc\020\003\022\r\n\tLogoutSuc\020\004\022\r\n\tLoginFa"
    "il\020\005\022\016\n\nLogoutFail\020\006\"\030\n\004Ping\022\020\n\010pingTime"
    "\030\001 \001(\003\"*\n\004Pong\022\020\n\010pingTime\030\001 \001(\003\022\020\n\010pong"
    "Time\030\002 \001(\003B\027\n\020com.ghj.protocolB\003Msgb\006pro"
    "to3", 803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_2eproto_once_);
void protobuf_AddDesc_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_2eproto_once_,
                 &protobuf_AddDesc_message_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_DataType_descriptor_;
}
bool Data_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Data_DataType Data::Chat;
const Data_DataType Data::Login;
const Data_DataType Data::Logout;
const Data_DataType Data::Ack;
const Data_DataType Data::Ping;
const Data_DataType Data::Pong;
const Data_DataType Data::DataType_MIN;
const Data_DataType Data::DataType_MAX;
const int Data::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kDataTypeFieldNumber;
const int Data::kChatFieldNumber;
const int Data::kLoginFieldNumber;
const int Data::kLogoutFieldNumber;
const int Data::kAckFieldNumber;
const int Data::kPingFieldNumber;
const int Data::kPongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Data)
}

void Data::InitAsDefaultInstance() {
  Data_default_oneof_instance_->chat_ = const_cast< ::Chat*>(
      ::Chat::internal_default_instance());
  Data_default_oneof_instance_->login_ = const_cast< ::Login*>(
      ::Login::internal_default_instance());
  Data_default_oneof_instance_->logout_ = const_cast< ::Logout*>(
      ::Logout::internal_default_instance());
  Data_default_oneof_instance_->ack_ = const_cast< ::Ack*>(
      ::Ack::internal_default_instance());
  Data_default_oneof_instance_->ping_ = const_cast< ::Ping*>(
      ::Ping::internal_default_instance());
  Data_default_oneof_instance_->pong_ = const_cast< ::Pong*>(
      ::Pong::internal_default_instance());
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Data)
}

void Data::SharedCtor() {
  datatype_ = 0;
  clear_has_dataBody();
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (has_dataBody()) {
    clear_dataBody();
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::clear_dataBody() {
// @@protoc_insertion_point(one_of_clear_start:Data)
  switch (dataBody_case()) {
    case kChat: {
      delete dataBody_.chat_;
      break;
    }
    case kLogin: {
      delete dataBody_.login_;
      break;
    }
    case kLogout: {
      delete dataBody_.logout_;
      break;
    }
    case kAck: {
      delete dataBody_.ack_;
      break;
    }
    case kPing: {
      delete dataBody_.ping_;
      break;
    }
    case kPong: {
      delete dataBody_.pong_;
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATABODY_NOT_SET;
}


void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:Data)
  datatype_ = 0;
  clear_dataBody();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Data.DataType dataType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_datatype(static_cast< ::Data_DataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }

      // optional .Chat chat = 2;
      case 2: {
        if (tag == 18) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        goto after_pong;
        break;
      }

      // optional .Login login = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_unusual;
        }
        goto after_pong;
        break;
      }

      // optional .Logout logout = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_unusual;
        }
        goto after_pong;
        break;
      }

      // optional .Ack ack = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_unusual;
        }
        goto after_pong;
        break;
      }

      // optional .Ping ping = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pong;
        break;
      }

      // optional .Pong pong = 7;
      case 7: {
        if (tag == 58) {
         parse_pong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pong()));
        } else {
          goto handle_unusual;
        }
       after_pong:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Data)
  // optional .Data.DataType dataType = 1;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->datatype(), output);
  }

  // optional .Chat chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *dataBody_.chat_, output);
  }

  // optional .Login login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *dataBody_.login_, output);
  }

  // optional .Logout logout = 4;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *dataBody_.logout_, output);
  }

  // optional .Ack ack = 5;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *dataBody_.ack_, output);
  }

  // optional .Ping ping = 6;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *dataBody_.ping_, output);
  }

  // optional .Pong pong = 7;
  if (has_pong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *dataBody_.pong_, output);
  }

  // @@protoc_insertion_point(serialize_end:Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Data)
  // optional .Data.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->datatype(), target);
  }

  // optional .Chat chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *dataBody_.chat_, false, target);
  }

  // optional .Login login = 3;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *dataBody_.login_, false, target);
  }

  // optional .Logout logout = 4;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *dataBody_.logout_, false, target);
  }

  // optional .Ack ack = 5;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *dataBody_.ack_, false, target);
  }

  // optional .Ping ping = 6;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *dataBody_.ping_, false, target);
  }

  // optional .Pong pong = 7;
  if (has_pong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *dataBody_.pong_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Data)
  size_t total_size = 0;

  // optional .Data.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
  }

  switch (dataBody_case()) {
    // optional .Chat chat = 2;
    case kChat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.chat_);
      break;
    }
    // optional .Login login = 3;
    case kLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.login_);
      break;
    }
    // optional .Logout logout = 4;
    case kLogout: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.logout_);
      break;
    }
    // optional .Ack ack = 5;
    case kAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.ack_);
      break;
    }
    // optional .Ping ping = 6;
    case kPing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.ping_);
      break;
    }
    // optional .Pong pong = 7;
    case kPong: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *dataBody_.pong_);
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Data)
    UnsafeMergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Data::UnsafeMergeFrom(const Data& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.dataBody_case()) {
    case kChat: {
      mutable_chat()->::Chat::MergeFrom(from.chat());
      break;
    }
    case kLogin: {
      mutable_login()->::Login::MergeFrom(from.login());
      break;
    }
    case kLogout: {
      mutable_logout()->::Logout::MergeFrom(from.logout());
      break;
    }
    case kAck: {
      mutable_ack()->::Ack::MergeFrom(from.ack());
      break;
    }
    case kPing: {
      mutable_ping()->::Ping::MergeFrom(from.ping());
      break;
    }
    case kPong: {
      mutable_pong()->::Pong::MergeFrom(from.pong());
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(datatype_, other->datatype_);
  std::swap(dataBody_, other->dataBody_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional .Data.DataType dataType = 1;
void Data::clear_datatype() {
  datatype_ = 0;
}
::Data_DataType Data::datatype() const {
  // @@protoc_insertion_point(field_get:Data.dataType)
  return static_cast< ::Data_DataType >(datatype_);
}
void Data::set_datatype(::Data_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:Data.dataType)
}

// optional .Chat chat = 2;
bool Data::has_chat() const {
  return dataBody_case() == kChat;
}
void Data::set_has_chat() {
  _oneof_case_[0] = kChat;
}
void Data::clear_chat() {
  if (has_chat()) {
    delete dataBody_.chat_;
    clear_has_dataBody();
  }
}
 const ::Chat& Data::chat() const {
  // @@protoc_insertion_point(field_get:Data.chat)
  return has_chat()
      ? *dataBody_.chat_
      : ::Chat::default_instance();
}
::Chat* Data::mutable_chat() {
  if (!has_chat()) {
    clear_dataBody();
    set_has_chat();
    dataBody_.chat_ = new ::Chat;
  }
  // @@protoc_insertion_point(field_mutable:Data.chat)
  return dataBody_.chat_;
}
::Chat* Data::release_chat() {
  // @@protoc_insertion_point(field_release:Data.chat)
  if (has_chat()) {
    clear_has_dataBody();
    ::Chat* temp = dataBody_.chat_;
    dataBody_.chat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_chat(::Chat* chat) {
  clear_dataBody();
  if (chat) {
    set_has_chat();
    dataBody_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.chat)
}

// optional .Login login = 3;
bool Data::has_login() const {
  return dataBody_case() == kLogin;
}
void Data::set_has_login() {
  _oneof_case_[0] = kLogin;
}
void Data::clear_login() {
  if (has_login()) {
    delete dataBody_.login_;
    clear_has_dataBody();
  }
}
 const ::Login& Data::login() const {
  // @@protoc_insertion_point(field_get:Data.login)
  return has_login()
      ? *dataBody_.login_
      : ::Login::default_instance();
}
::Login* Data::mutable_login() {
  if (!has_login()) {
    clear_dataBody();
    set_has_login();
    dataBody_.login_ = new ::Login;
  }
  // @@protoc_insertion_point(field_mutable:Data.login)
  return dataBody_.login_;
}
::Login* Data::release_login() {
  // @@protoc_insertion_point(field_release:Data.login)
  if (has_login()) {
    clear_has_dataBody();
    ::Login* temp = dataBody_.login_;
    dataBody_.login_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_login(::Login* login) {
  clear_dataBody();
  if (login) {
    set_has_login();
    dataBody_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.login)
}

// optional .Logout logout = 4;
bool Data::has_logout() const {
  return dataBody_case() == kLogout;
}
void Data::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
void Data::clear_logout() {
  if (has_logout()) {
    delete dataBody_.logout_;
    clear_has_dataBody();
  }
}
 const ::Logout& Data::logout() const {
  // @@protoc_insertion_point(field_get:Data.logout)
  return has_logout()
      ? *dataBody_.logout_
      : ::Logout::default_instance();
}
::Logout* Data::mutable_logout() {
  if (!has_logout()) {
    clear_dataBody();
    set_has_logout();
    dataBody_.logout_ = new ::Logout;
  }
  // @@protoc_insertion_point(field_mutable:Data.logout)
  return dataBody_.logout_;
}
::Logout* Data::release_logout() {
  // @@protoc_insertion_point(field_release:Data.logout)
  if (has_logout()) {
    clear_has_dataBody();
    ::Logout* temp = dataBody_.logout_;
    dataBody_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_logout(::Logout* logout) {
  clear_dataBody();
  if (logout) {
    set_has_logout();
    dataBody_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.logout)
}

// optional .Ack ack = 5;
bool Data::has_ack() const {
  return dataBody_case() == kAck;
}
void Data::set_has_ack() {
  _oneof_case_[0] = kAck;
}
void Data::clear_ack() {
  if (has_ack()) {
    delete dataBody_.ack_;
    clear_has_dataBody();
  }
}
 const ::Ack& Data::ack() const {
  // @@protoc_insertion_point(field_get:Data.ack)
  return has_ack()
      ? *dataBody_.ack_
      : ::Ack::default_instance();
}
::Ack* Data::mutable_ack() {
  if (!has_ack()) {
    clear_dataBody();
    set_has_ack();
    dataBody_.ack_ = new ::Ack;
  }
  // @@protoc_insertion_point(field_mutable:Data.ack)
  return dataBody_.ack_;
}
::Ack* Data::release_ack() {
  // @@protoc_insertion_point(field_release:Data.ack)
  if (has_ack()) {
    clear_has_dataBody();
    ::Ack* temp = dataBody_.ack_;
    dataBody_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_ack(::Ack* ack) {
  clear_dataBody();
  if (ack) {
    set_has_ack();
    dataBody_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ack)
}

// optional .Ping ping = 6;
bool Data::has_ping() const {
  return dataBody_case() == kPing;
}
void Data::set_has_ping() {
  _oneof_case_[0] = kPing;
}
void Data::clear_ping() {
  if (has_ping()) {
    delete dataBody_.ping_;
    clear_has_dataBody();
  }
}
 const ::Ping& Data::ping() const {
  // @@protoc_insertion_point(field_get:Data.ping)
  return has_ping()
      ? *dataBody_.ping_
      : ::Ping::default_instance();
}
::Ping* Data::mutable_ping() {
  if (!has_ping()) {
    clear_dataBody();
    set_has_ping();
    dataBody_.ping_ = new ::Ping;
  }
  // @@protoc_insertion_point(field_mutable:Data.ping)
  return dataBody_.ping_;
}
::Ping* Data::release_ping() {
  // @@protoc_insertion_point(field_release:Data.ping)
  if (has_ping()) {
    clear_has_dataBody();
    ::Ping* temp = dataBody_.ping_;
    dataBody_.ping_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_ping(::Ping* ping) {
  clear_dataBody();
  if (ping) {
    set_has_ping();
    dataBody_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ping)
}

// optional .Pong pong = 7;
bool Data::has_pong() const {
  return dataBody_case() == kPong;
}
void Data::set_has_pong() {
  _oneof_case_[0] = kPong;
}
void Data::clear_pong() {
  if (has_pong()) {
    delete dataBody_.pong_;
    clear_has_dataBody();
  }
}
 const ::Pong& Data::pong() const {
  // @@protoc_insertion_point(field_get:Data.pong)
  return has_pong()
      ? *dataBody_.pong_
      : ::Pong::default_instance();
}
::Pong* Data::mutable_pong() {
  if (!has_pong()) {
    clear_dataBody();
    set_has_pong();
    dataBody_.pong_ = new ::Pong;
  }
  // @@protoc_insertion_point(field_mutable:Data.pong)
  return dataBody_.pong_;
}
::Pong* Data::release_pong() {
  // @@protoc_insertion_point(field_release:Data.pong)
  if (has_pong()) {
    clear_has_dataBody();
    ::Pong* temp = dataBody_.pong_;
    dataBody_.pong_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Data::set_allocated_pong(::Pong* pong) {
  clear_dataBody();
  if (pong) {
    set_has_pong();
    dataBody_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.pong)
}

bool Data::has_dataBody() const {
  return dataBody_case() != DATABODY_NOT_SET;
}
void Data::clear_has_dataBody() {
  _oneof_case_[0] = DATABODY_NOT_SET;
}
Data::DataBodyCase Data::dataBody_case() const {
  return Data::DataBodyCase(_oneof_case_[0]);
}
inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Chat_ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_ChatType_descriptor_;
}
bool Chat_ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chat_ChatType Chat::Single;
const Chat_ChatType Chat::Group;
const Chat_ChatType Chat::ChatType_MIN;
const Chat_ChatType Chat::ChatType_MAX;
const int Chat::ChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chat::kIdFieldNumber;
const int Chat::kFormFieldNumber;
const int Chat::kToFieldNumber;
const int Chat::kTypeFieldNumber;
const int Chat::kChatTypeFieldNumber;
const int Chat::kContentFieldNumber;
const int Chat::kExtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chat::Chat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat)
}

void Chat::InitAsDefaultInstance() {
}

Chat::Chat(const Chat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Chat)
}

void Chat::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&chattype_) -
    reinterpret_cast<char*>(&id_) + sizeof(chattype_));
  _cached_size_ = 0;
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:Chat)
  SharedDtor();
}

void Chat::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_descriptor_;
}

const Chat& Chat::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Chat> Chat_default_instance_;

Chat* Chat::New(::google::protobuf::Arena* arena) const {
  Chat* n = new Chat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Chat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Chat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, chattype_);
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_form;
        break;
      }

      // optional int64 form = 2;
      case 2: {
        if (tag == 16) {
         parse_form:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &form_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }

      // optional int64 to = 3;
      case 3: {
        if (tag == 24) {
         parse_to:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chatType;
        break;
      }

      // optional .Chat.ChatType chatType = 5;
      case 5: {
        if (tag == 40) {
         parse_chatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chattype(static_cast< ::Chat_ChatType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ext;
        break;
      }

      // optional string ext = 7;
      case 7: {
        if (tag == 58) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Chat.ext"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Chat)
  return false;
#undef DO_
}

void Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Chat)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->form(), output);
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->to(), output);
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional .Chat.ChatType chatType = 5;
  if (this->chattype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->chattype(), output);
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional string ext = 7;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ext(), output);
  }

  // @@protoc_insertion_point(serialize_end:Chat)
}

::google::protobuf::uint8* Chat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Chat)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->form(), target);
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->to(), target);
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional .Chat.ChatType chatType = 5;
  if (this->chattype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->chattype(), target);
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string ext = 7;
  if (this->ext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Chat.ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ext(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Chat)
  return target;
}

size_t Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat)
  size_t total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->form());
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // optional int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional .Chat.ChatType chatType = 5;
  if (this->chattype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional string ext = 7;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Chat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat)
    UnsafeMergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Chat::UnsafeMergeFrom(const Chat& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.form() != 0) {
    set_form(from.form());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.chattype() != 0) {
    set_chattype(from.chattype());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.ext().size() > 0) {

    ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext_);
  }
}

void Chat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Chat::IsInitialized() const {

  return true;
}

void Chat::Swap(Chat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chat::InternalSwap(Chat* other) {
  std::swap(id_, other->id_);
  std::swap(form_, other->form_);
  std::swap(to_, other->to_);
  std::swap(type_, other->type_);
  std::swap(chattype_, other->chattype_);
  content_.Swap(&other->content_);
  ext_.Swap(&other->ext_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_descriptor_;
  metadata.reflection = Chat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chat

// optional int64 id = 1;
void Chat::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Chat::id() const {
  // @@protoc_insertion_point(field_get:Chat.id)
  return id_;
}
void Chat::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Chat.id)
}

// optional int64 form = 2;
void Chat::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Chat::form() const {
  // @@protoc_insertion_point(field_get:Chat.form)
  return form_;
}
void Chat::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Chat.form)
}

// optional int64 to = 3;
void Chat::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Chat::to() const {
  // @@protoc_insertion_point(field_get:Chat.to)
  return to_;
}
void Chat::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:Chat.to)
}

// optional int32 type = 4;
void Chat::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Chat::type() const {
  // @@protoc_insertion_point(field_get:Chat.type)
  return type_;
}
void Chat::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Chat.type)
}

// optional .Chat.ChatType chatType = 5;
void Chat::clear_chattype() {
  chattype_ = 0;
}
::Chat_ChatType Chat::chattype() const {
  // @@protoc_insertion_point(field_get:Chat.chatType)
  return static_cast< ::Chat_ChatType >(chattype_);
}
void Chat::set_chattype(::Chat_ChatType value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:Chat.chatType)
}

// optional string content = 6;
void Chat::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chat::content() const {
  // @@protoc_insertion_point(field_get:Chat.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chat::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.content)
}
void Chat::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.content)
}
void Chat::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.content)
}
::std::string* Chat::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Chat.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chat::release_content() {
  // @@protoc_insertion_point(field_release:Chat.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chat::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Chat.content)
}

// optional string ext = 7;
void Chat::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Chat::ext() const {
  // @@protoc_insertion_point(field_get:Chat.ext)
  return ext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chat::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.ext)
}
void Chat::set_ext(const char* value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ext)
}
void Chat::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ext)
}
::std::string* Chat::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:Chat.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Chat::release_ext() {
  // @@protoc_insertion_point(field_release:Chat.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Chat::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:Chat.ext)
}

inline const Chat* Chat::internal_default_instance() {
  return &Chat_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kIdFieldNumber;
const int Login::kFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Login)
}

void Login::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&form_) -
    reinterpret_cast<char*>(&id_) + sizeof(form_));
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Login)
  SharedDtor();
}

void Login::SharedDtor() {
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Login> Login_default_instance_;

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Login)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Login, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Login*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, form_);

#undef ZR_HELPER_
#undef ZR_

}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_form;
        break;
      }

      // optional int64 form = 2;
      case 2: {
        if (tag == 16) {
         parse_form:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &form_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->form(), output);
  }

  // @@protoc_insertion_point(serialize_end:Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Login)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->form(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login)
  size_t total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->form());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login)
    UnsafeMergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Login::UnsafeMergeFrom(const Login& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.form() != 0) {
    set_form(from.form());
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  std::swap(id_, other->id_);
  std::swap(form_, other->form_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// optional int64 id = 1;
void Login::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Login::id() const {
  // @@protoc_insertion_point(field_get:Login.id)
  return id_;
}
void Login::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Login.id)
}

// optional int64 form = 2;
void Login::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Login::form() const {
  // @@protoc_insertion_point(field_get:Login.form)
  return form_;
}
void Login::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Login.form)
}

inline const Login* Login::internal_default_instance() {
  return &Login_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logout::kIdFieldNumber;
const int Logout::kFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Logout)
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Logout)
}

void Logout::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&form_) -
    reinterpret_cast<char*>(&id_) + sizeof(form_));
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:Logout)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Logout, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Logout*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, form_);

#undef ZR_HELPER_
#undef ZR_

}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_form;
        break;
      }

      // optional int64 form = 2;
      case 2: {
        if (tag == 16) {
         parse_form:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &form_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Logout)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->form(), output);
  }

  // @@protoc_insertion_point(serialize_end:Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Logout)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->form(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Logout)
  size_t total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional int64 form = 2;
  if (this->form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->form());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Logout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Logout)
    UnsafeMergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Logout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Logout::UnsafeMergeFrom(const Logout& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.form() != 0) {
    set_form(from.form());
  }
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Logout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Logout::IsInitialized() const {

  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  std::swap(id_, other->id_);
  std::swap(form_, other->form_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

// optional int64 id = 1;
void Logout::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Logout::id() const {
  // @@protoc_insertion_point(field_get:Logout.id)
  return id_;
}
void Logout::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Logout.id)
}

// optional int64 form = 2;
void Logout::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Logout::form() const {
  // @@protoc_insertion_point(field_get:Logout.form)
  return form_;
}
void Logout::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Logout.form)
}

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Ack_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_Status_descriptor_;
}
bool Ack_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ack_Status Ack::Receive;
const Ack_Status Ack::Accept;
const Ack_Status Ack::Read;
const Ack_Status Ack::LoginSuc;
const Ack_Status Ack::LogoutSuc;
const Ack_Status Ack::LoginFail;
const Ack_Status Ack::LogoutFail;
const Ack_Status Ack::Status_MIN;
const Ack_Status Ack::Status_MAX;
const int Ack::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ack::kMsgIdFieldNumber;
const int Ack::kFromFieldNumber;
const int Ack::kToFieldNumber;
const int Ack::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ack::Ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ack)
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ack)
}

void Ack::SharedCtor() {
  ::memset(&msgid_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&msgid_) + sizeof(status_));
  _cached_size_ = 0;
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Ack> Ack_default_instance_;

Ack* Ack::New(::google::protobuf::Arena* arena) const {
  Ack* n = new Ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:Ack)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ack, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ack*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgid_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }

      // optional int64 from = 2;
      case 2: {
        if (tag == 16) {
         parse_from:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }

      // optional int64 to = 3;
      case 3: {
        if (tag == 24) {
         parse_to:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .Ack.Status status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::Ack_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ack)
  // optional int64 msgId = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional int64 from = 2;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->from(), output);
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->to(), output);
  }

  // optional .Ack.Status status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ack)
}

::google::protobuf::uint8* Ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ack)
  // optional int64 msgId = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional int64 from = 2;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->from(), target);
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->to(), target);
  }

  // optional .Ack.Status status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ack)
  size_t total_size = 0;

  // optional int64 msgId = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->msgid());
  }

  // optional int64 from = 2;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from());
  }

  // optional int64 to = 3;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // optional .Ack.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ack)
    UnsafeMergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ack)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Ack::UnsafeMergeFrom(const Ack& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ack)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Ack::IsInitialized() const {

  return true;
}

void Ack::Swap(Ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ack::InternalSwap(Ack* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ack

// optional int64 msgId = 1;
void Ack::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Ack::msgid() const {
  // @@protoc_insertion_point(field_get:Ack.msgId)
  return msgid_;
}
void Ack::set_msgid(::google::protobuf::int64 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Ack.msgId)
}

// optional int64 from = 2;
void Ack::clear_from() {
  from_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Ack::from() const {
  // @@protoc_insertion_point(field_get:Ack.from)
  return from_;
}
void Ack::set_from(::google::protobuf::int64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:Ack.from)
}

// optional int64 to = 3;
void Ack::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Ack::to() const {
  // @@protoc_insertion_point(field_get:Ack.to)
  return to_;
}
void Ack::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:Ack.to)
}

// optional .Ack.Status status = 4;
void Ack::clear_status() {
  status_ = 0;
}
::Ack_Status Ack::status() const {
  // @@protoc_insertion_point(field_get:Ack.status)
  return static_cast< ::Ack_Status >(status_);
}
void Ack::set_status(::Ack_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Ack.status)
}

inline const Ack* Ack::internal_default_instance() {
  return &Ack_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kPingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
  pingtime_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Ping> Ping_default_instance_;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Ping)
  pingtime_ = GOOGLE_LONGLONG(0);
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pingTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pingtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pingtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pingtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ping)
  size_t total_size = 0;

  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pingtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ping)
    UnsafeMergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Ping::UnsafeMergeFrom(const Ping& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pingtime() != 0) {
    set_pingtime(from.pingtime());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(pingtime_, other->pingtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional int64 pingTime = 1;
void Ping::clear_pingtime() {
  pingtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Ping::pingtime() const {
  // @@protoc_insertion_point(field_get:Ping.pingTime)
  return pingtime_;
}
void Ping::set_pingtime(::google::protobuf::int64 value) {
  
  pingtime_ = value;
  // @@protoc_insertion_point(field_set:Ping.pingTime)
}

inline const Ping* Ping::internal_default_instance() {
  return &Ping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pong::kPingTimeFieldNumber;
const int Pong::kPongTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pong::Pong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pong)
}

void Pong::InitAsDefaultInstance() {
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pong)
}

void Pong::SharedCtor() {
  ::memset(&pingtime_, 0, reinterpret_cast<char*>(&pongtime_) -
    reinterpret_cast<char*>(&pingtime_) + sizeof(pongtime_));
  _cached_size_ = 0;
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pong_descriptor_;
}

const Pong& Pong::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Pong> Pong_default_instance_;

Pong* Pong::New(::google::protobuf::Arena* arena) const {
  Pong* n = new Pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:Pong)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pong, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pong*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pingtime_, pongtime_);

#undef ZR_HELPER_
#undef ZR_

}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pingTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pingtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pongTime;
        break;
      }

      // optional int64 pongTime = 2;
      case 2: {
        if (tag == 16) {
         parse_pongTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pongtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pong)
  return false;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pong)
  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pingtime(), output);
  }

  // optional int64 pongTime = 2;
  if (this->pongtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pongtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:Pong)
}

::google::protobuf::uint8* Pong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pong)
  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pingtime(), target);
  }

  // optional int64 pongTime = 2;
  if (this->pongtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pongtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pong)
  size_t total_size = 0;

  // optional int64 pingTime = 1;
  if (this->pingtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pingtime());
  }

  // optional int64 pongTime = 2;
  if (this->pongtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pongtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pong)
    UnsafeMergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pong)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Pong::UnsafeMergeFrom(const Pong& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pingtime() != 0) {
    set_pingtime(from.pingtime());
  }
  if (from.pongtime() != 0) {
    set_pongtime(from.pongtime());
  }
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pong)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Pong::IsInitialized() const {

  return true;
}

void Pong::Swap(Pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pong::InternalSwap(Pong* other) {
  std::swap(pingtime_, other->pingtime_);
  std::swap(pongtime_, other->pongtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pong_descriptor_;
  metadata.reflection = Pong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pong

// optional int64 pingTime = 1;
void Pong::clear_pingtime() {
  pingtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Pong::pingtime() const {
  // @@protoc_insertion_point(field_get:Pong.pingTime)
  return pingtime_;
}
void Pong::set_pingtime(::google::protobuf::int64 value) {
  
  pingtime_ = value;
  // @@protoc_insertion_point(field_set:Pong.pingTime)
}

// optional int64 pongTime = 2;
void Pong::clear_pongtime() {
  pongtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Pong::pongtime() const {
  // @@protoc_insertion_point(field_get:Pong.pongTime)
  return pongtime_;
}
void Pong::set_pongtime(::google::protobuf::int64 value) {
  
  pongtime_ = value;
  // @@protoc_insertion_point(field_set:Pong.pongTime)
}

inline const Pong* Pong::internal_default_instance() {
  return &Pong_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

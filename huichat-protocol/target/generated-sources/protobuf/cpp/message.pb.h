// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_InitDefaults_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Ack;
class Chat;
class Data;
class Login;
class Logout;
class Ping;
class Pong;

enum Data_DataType {
  Data_DataType_Chat = 0,
  Data_DataType_Login = 1,
  Data_DataType_Logout = 2,
  Data_DataType_Ack = 3,
  Data_DataType_Ping = 4,
  Data_DataType_Pong = 5,
  Data_DataType_Data_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Data_DataType_Data_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Data_DataType_IsValid(int value);
const Data_DataType Data_DataType_DataType_MIN = Data_DataType_Chat;
const Data_DataType Data_DataType_DataType_MAX = Data_DataType_Pong;
const int Data_DataType_DataType_ARRAYSIZE = Data_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor();
inline const ::std::string& Data_DataType_Name(Data_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_DataType_descriptor(), value);
}
inline bool Data_DataType_Parse(
    const ::std::string& name, Data_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_DataType>(
    Data_DataType_descriptor(), name, value);
}
enum Chat_ChatType {
  Chat_ChatType_Single = 0,
  Chat_ChatType_Group = 1,
  Chat_ChatType_Chat_ChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Chat_ChatType_Chat_ChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Chat_ChatType_IsValid(int value);
const Chat_ChatType Chat_ChatType_ChatType_MIN = Chat_ChatType_Single;
const Chat_ChatType Chat_ChatType_ChatType_MAX = Chat_ChatType_Group;
const int Chat_ChatType_ChatType_ARRAYSIZE = Chat_ChatType_ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chat_ChatType_descriptor();
inline const ::std::string& Chat_ChatType_Name(Chat_ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chat_ChatType_descriptor(), value);
}
inline bool Chat_ChatType_Parse(
    const ::std::string& name, Chat_ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chat_ChatType>(
    Chat_ChatType_descriptor(), name, value);
}
enum Ack_Status {
  Ack_Status_Receive = 0,
  Ack_Status_Accept = 1,
  Ack_Status_Read = 2,
  Ack_Status_LoginSuc = 3,
  Ack_Status_LogoutSuc = 4,
  Ack_Status_LoginFail = 5,
  Ack_Status_LogoutFail = 6,
  Ack_Status_Ack_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ack_Status_Ack_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ack_Status_IsValid(int value);
const Ack_Status Ack_Status_Status_MIN = Ack_Status_Receive;
const Ack_Status Ack_Status_Status_MAX = Ack_Status_LogoutFail;
const int Ack_Status_Status_ARRAYSIZE = Ack_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ack_Status_descriptor();
inline const ::std::string& Ack_Status_Name(Ack_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ack_Status_descriptor(), value);
}
inline bool Ack_Status_Parse(
    const ::std::string& name, Ack_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ack_Status>(
    Ack_Status_descriptor(), name, value);
}
// ===================================================================

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  enum DataBodyCase {
    kChat = 2,
    kLogin = 3,
    kLogout = 4,
    kAck = 5,
    kPing = 6,
    kPong = 7,
    DATABODY_NOT_SET = 0,
  };

  static const Data* internal_default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  void UnsafeMergeFrom(const Data& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Data_DataType DataType;
  static const DataType Chat =
    Data_DataType_Chat;
  static const DataType Login =
    Data_DataType_Login;
  static const DataType Logout =
    Data_DataType_Logout;
  static const DataType Ack =
    Data_DataType_Ack;
  static const DataType Ping =
    Data_DataType_Ping;
  static const DataType Pong =
    Data_DataType_Pong;
  static inline bool DataType_IsValid(int value) {
    return Data_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Data_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Data_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Data_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Data_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Data_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Data.DataType dataType = 1;
  void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  ::Data_DataType datatype() const;
  void set_datatype(::Data_DataType value);

  // optional .Chat chat = 2;
  bool has_chat() const;
  void clear_chat();
  static const int kChatFieldNumber = 2;
  const ::Chat& chat() const;
  ::Chat* mutable_chat();
  ::Chat* release_chat();
  void set_allocated_chat(::Chat* chat);

  // optional .Login login = 3;
  bool has_login() const;
  void clear_login();
  static const int kLoginFieldNumber = 3;
  const ::Login& login() const;
  ::Login* mutable_login();
  ::Login* release_login();
  void set_allocated_login(::Login* login);

  // optional .Logout logout = 4;
  bool has_logout() const;
  void clear_logout();
  static const int kLogoutFieldNumber = 4;
  const ::Logout& logout() const;
  ::Logout* mutable_logout();
  ::Logout* release_logout();
  void set_allocated_logout(::Logout* logout);

  // optional .Ack ack = 5;
  bool has_ack() const;
  void clear_ack();
  static const int kAckFieldNumber = 5;
  const ::Ack& ack() const;
  ::Ack* mutable_ack();
  ::Ack* release_ack();
  void set_allocated_ack(::Ack* ack);

  // optional .Ping ping = 6;
  bool has_ping() const;
  void clear_ping();
  static const int kPingFieldNumber = 6;
  const ::Ping& ping() const;
  ::Ping* mutable_ping();
  ::Ping* release_ping();
  void set_allocated_ping(::Ping* ping);

  // optional .Pong pong = 7;
  bool has_pong() const;
  void clear_pong();
  static const int kPongFieldNumber = 7;
  const ::Pong& pong() const;
  ::Pong* mutable_pong();
  ::Pong* release_pong();
  void set_allocated_pong(::Pong* pong);

  DataBodyCase dataBody_case() const;
  // @@protoc_insertion_point(class_scope:Data)
 private:
  inline void set_has_chat();
  inline void set_has_login();
  inline void set_has_logout();
  inline void set_has_ack();
  inline void set_has_ping();
  inline void set_has_pong();

  inline bool has_dataBody() const;
  void clear_dataBody();
  inline void clear_has_dataBody();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int datatype_;
  union DataBodyUnion {
    DataBodyUnion() {}
    ::Chat* chat_;
    ::Login* login_;
    ::Logout* logout_;
    ::Ack* ack_;
    ::Ping* ping_;
    ::Pong* pong_;
  } dataBody_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

// -------------------------------------------------------------------

class Chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat& default_instance();

  static const Chat* internal_default_instance();

  void Swap(Chat* other);

  // implements Message ----------------------------------------------

  inline Chat* New() const { return New(NULL); }

  Chat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Chat* other);
  void UnsafeMergeFrom(const Chat& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Chat_ChatType ChatType;
  static const ChatType Single =
    Chat_ChatType_Single;
  static const ChatType Group =
    Chat_ChatType_Group;
  static inline bool ChatType_IsValid(int value) {
    return Chat_ChatType_IsValid(value);
  }
  static const ChatType ChatType_MIN =
    Chat_ChatType_ChatType_MIN;
  static const ChatType ChatType_MAX =
    Chat_ChatType_ChatType_MAX;
  static const int ChatType_ARRAYSIZE =
    Chat_ChatType_ChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatType_descriptor() {
    return Chat_ChatType_descriptor();
  }
  static inline const ::std::string& ChatType_Name(ChatType value) {
    return Chat_ChatType_Name(value);
  }
  static inline bool ChatType_Parse(const ::std::string& name,
      ChatType* value) {
    return Chat_ChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 form = 2;
  void clear_form();
  static const int kFormFieldNumber = 2;
  ::google::protobuf::int64 form() const;
  void set_form(::google::protobuf::int64 value);

  // optional int64 to = 3;
  void clear_to();
  static const int kToFieldNumber = 3;
  ::google::protobuf::int64 to() const;
  void set_to(::google::protobuf::int64 value);

  // optional int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional .Chat.ChatType chatType = 5;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 5;
  ::Chat_ChatType chattype() const;
  void set_chattype(::Chat_ChatType value);

  // optional string content = 6;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string ext = 7;
  void clear_ext();
  static const int kExtFieldNumber = 7;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // @@protoc_insertion_point(class_scope:Chat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 form_;
  ::google::protobuf::int64 to_;
  ::google::protobuf::int32 type_;
  int chattype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Chat> Chat_default_instance_;

// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static const Login* internal_default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  inline Login* New() const { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login* other);
  void UnsafeMergeFrom(const Login& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 form = 2;
  void clear_form();
  static const int kFormFieldNumber = 2;
  ::google::protobuf::int64 form() const;
  void set_form(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 form_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Login> Login_default_instance_;

// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Logout) */ {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  static const Logout* internal_default_instance();

  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  inline Logout* New() const { return New(NULL); }

  Logout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Logout* other);
  void UnsafeMergeFrom(const Logout& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 form = 2;
  void clear_form();
  static const int kFormFieldNumber = 2;
  ::google::protobuf::int64 form() const;
  void set_form(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Logout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 form_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  static const Ack* internal_default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  inline Ack* New() const { return New(NULL); }

  Ack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ack* other);
  void UnsafeMergeFrom(const Ack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ack_Status Status;
  static const Status Receive =
    Ack_Status_Receive;
  static const Status Accept =
    Ack_Status_Accept;
  static const Status Read =
    Ack_Status_Read;
  static const Status LoginSuc =
    Ack_Status_LoginSuc;
  static const Status LogoutSuc =
    Ack_Status_LogoutSuc;
  static const Status LoginFail =
    Ack_Status_LoginFail;
  static const Status LogoutFail =
    Ack_Status_LogoutFail;
  static inline bool Status_IsValid(int value) {
    return Ack_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Ack_Status_Status_MIN;
  static const Status Status_MAX =
    Ack_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Ack_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Ack_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Ack_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Ack_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 msgId = 1;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int64 msgid() const;
  void set_msgid(::google::protobuf::int64 value);

  // optional int64 from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  ::google::protobuf::int64 from() const;
  void set_from(::google::protobuf::int64 value);

  // optional int64 to = 3;
  void clear_to();
  static const int kToFieldNumber = 3;
  ::google::protobuf::int64 to() const;
  void set_to(::google::protobuf::int64 value);

  // optional .Ack.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::Ack_Status status() const;
  void set_status(::Ack_Status value);

  // @@protoc_insertion_point(class_scope:Ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 msgid_;
  ::google::protobuf::int64 from_;
  ::google::protobuf::int64 to_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Ack> Ack_default_instance_;

// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static const Ping* internal_default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  inline Ping* New() const { return New(NULL); }

  Ping* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ping* other);
  void UnsafeMergeFrom(const Ping& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pingTime = 1;
  void clear_pingtime();
  static const int kPingTimeFieldNumber = 1;
  ::google::protobuf::int64 pingtime() const;
  void set_pingtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 pingtime_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Ping> Ping_default_instance_;

// -------------------------------------------------------------------

class Pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Pong) */ {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();

  static const Pong* internal_default_instance();

  void Swap(Pong* other);

  // implements Message ----------------------------------------------

  inline Pong* New() const { return New(NULL); }

  Pong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pong* other);
  void UnsafeMergeFrom(const Pong& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pingTime = 1;
  void clear_pingtime();
  static const int kPingTimeFieldNumber = 1;
  ::google::protobuf::int64 pingtime() const;
  void set_pingtime(::google::protobuf::int64 value);

  // optional int64 pongTime = 2;
  void clear_pongtime();
  static const int kPongTimeFieldNumber = 2;
  ::google::protobuf::int64 pongtime() const;
  void set_pongtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 pingtime_;
  ::google::protobuf::int64 pongtime_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Pong> Pong_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional .Data.DataType dataType = 1;
inline void Data::clear_datatype() {
  datatype_ = 0;
}
inline ::Data_DataType Data::datatype() const {
  // @@protoc_insertion_point(field_get:Data.dataType)
  return static_cast< ::Data_DataType >(datatype_);
}
inline void Data::set_datatype(::Data_DataType value) {
  
  datatype_ = value;
  // @@protoc_insertion_point(field_set:Data.dataType)
}

// optional .Chat chat = 2;
inline bool Data::has_chat() const {
  return dataBody_case() == kChat;
}
inline void Data::set_has_chat() {
  _oneof_case_[0] = kChat;
}
inline void Data::clear_chat() {
  if (has_chat()) {
    delete dataBody_.chat_;
    clear_has_dataBody();
  }
}
inline  const ::Chat& Data::chat() const {
  // @@protoc_insertion_point(field_get:Data.chat)
  return has_chat()
      ? *dataBody_.chat_
      : ::Chat::default_instance();
}
inline ::Chat* Data::mutable_chat() {
  if (!has_chat()) {
    clear_dataBody();
    set_has_chat();
    dataBody_.chat_ = new ::Chat;
  }
  // @@protoc_insertion_point(field_mutable:Data.chat)
  return dataBody_.chat_;
}
inline ::Chat* Data::release_chat() {
  // @@protoc_insertion_point(field_release:Data.chat)
  if (has_chat()) {
    clear_has_dataBody();
    ::Chat* temp = dataBody_.chat_;
    dataBody_.chat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_chat(::Chat* chat) {
  clear_dataBody();
  if (chat) {
    set_has_chat();
    dataBody_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.chat)
}

// optional .Login login = 3;
inline bool Data::has_login() const {
  return dataBody_case() == kLogin;
}
inline void Data::set_has_login() {
  _oneof_case_[0] = kLogin;
}
inline void Data::clear_login() {
  if (has_login()) {
    delete dataBody_.login_;
    clear_has_dataBody();
  }
}
inline  const ::Login& Data::login() const {
  // @@protoc_insertion_point(field_get:Data.login)
  return has_login()
      ? *dataBody_.login_
      : ::Login::default_instance();
}
inline ::Login* Data::mutable_login() {
  if (!has_login()) {
    clear_dataBody();
    set_has_login();
    dataBody_.login_ = new ::Login;
  }
  // @@protoc_insertion_point(field_mutable:Data.login)
  return dataBody_.login_;
}
inline ::Login* Data::release_login() {
  // @@protoc_insertion_point(field_release:Data.login)
  if (has_login()) {
    clear_has_dataBody();
    ::Login* temp = dataBody_.login_;
    dataBody_.login_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_login(::Login* login) {
  clear_dataBody();
  if (login) {
    set_has_login();
    dataBody_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.login)
}

// optional .Logout logout = 4;
inline bool Data::has_logout() const {
  return dataBody_case() == kLogout;
}
inline void Data::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
inline void Data::clear_logout() {
  if (has_logout()) {
    delete dataBody_.logout_;
    clear_has_dataBody();
  }
}
inline  const ::Logout& Data::logout() const {
  // @@protoc_insertion_point(field_get:Data.logout)
  return has_logout()
      ? *dataBody_.logout_
      : ::Logout::default_instance();
}
inline ::Logout* Data::mutable_logout() {
  if (!has_logout()) {
    clear_dataBody();
    set_has_logout();
    dataBody_.logout_ = new ::Logout;
  }
  // @@protoc_insertion_point(field_mutable:Data.logout)
  return dataBody_.logout_;
}
inline ::Logout* Data::release_logout() {
  // @@protoc_insertion_point(field_release:Data.logout)
  if (has_logout()) {
    clear_has_dataBody();
    ::Logout* temp = dataBody_.logout_;
    dataBody_.logout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_logout(::Logout* logout) {
  clear_dataBody();
  if (logout) {
    set_has_logout();
    dataBody_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.logout)
}

// optional .Ack ack = 5;
inline bool Data::has_ack() const {
  return dataBody_case() == kAck;
}
inline void Data::set_has_ack() {
  _oneof_case_[0] = kAck;
}
inline void Data::clear_ack() {
  if (has_ack()) {
    delete dataBody_.ack_;
    clear_has_dataBody();
  }
}
inline  const ::Ack& Data::ack() const {
  // @@protoc_insertion_point(field_get:Data.ack)
  return has_ack()
      ? *dataBody_.ack_
      : ::Ack::default_instance();
}
inline ::Ack* Data::mutable_ack() {
  if (!has_ack()) {
    clear_dataBody();
    set_has_ack();
    dataBody_.ack_ = new ::Ack;
  }
  // @@protoc_insertion_point(field_mutable:Data.ack)
  return dataBody_.ack_;
}
inline ::Ack* Data::release_ack() {
  // @@protoc_insertion_point(field_release:Data.ack)
  if (has_ack()) {
    clear_has_dataBody();
    ::Ack* temp = dataBody_.ack_;
    dataBody_.ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_ack(::Ack* ack) {
  clear_dataBody();
  if (ack) {
    set_has_ack();
    dataBody_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ack)
}

// optional .Ping ping = 6;
inline bool Data::has_ping() const {
  return dataBody_case() == kPing;
}
inline void Data::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void Data::clear_ping() {
  if (has_ping()) {
    delete dataBody_.ping_;
    clear_has_dataBody();
  }
}
inline  const ::Ping& Data::ping() const {
  // @@protoc_insertion_point(field_get:Data.ping)
  return has_ping()
      ? *dataBody_.ping_
      : ::Ping::default_instance();
}
inline ::Ping* Data::mutable_ping() {
  if (!has_ping()) {
    clear_dataBody();
    set_has_ping();
    dataBody_.ping_ = new ::Ping;
  }
  // @@protoc_insertion_point(field_mutable:Data.ping)
  return dataBody_.ping_;
}
inline ::Ping* Data::release_ping() {
  // @@protoc_insertion_point(field_release:Data.ping)
  if (has_ping()) {
    clear_has_dataBody();
    ::Ping* temp = dataBody_.ping_;
    dataBody_.ping_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_ping(::Ping* ping) {
  clear_dataBody();
  if (ping) {
    set_has_ping();
    dataBody_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.ping)
}

// optional .Pong pong = 7;
inline bool Data::has_pong() const {
  return dataBody_case() == kPong;
}
inline void Data::set_has_pong() {
  _oneof_case_[0] = kPong;
}
inline void Data::clear_pong() {
  if (has_pong()) {
    delete dataBody_.pong_;
    clear_has_dataBody();
  }
}
inline  const ::Pong& Data::pong() const {
  // @@protoc_insertion_point(field_get:Data.pong)
  return has_pong()
      ? *dataBody_.pong_
      : ::Pong::default_instance();
}
inline ::Pong* Data::mutable_pong() {
  if (!has_pong()) {
    clear_dataBody();
    set_has_pong();
    dataBody_.pong_ = new ::Pong;
  }
  // @@protoc_insertion_point(field_mutable:Data.pong)
  return dataBody_.pong_;
}
inline ::Pong* Data::release_pong() {
  // @@protoc_insertion_point(field_release:Data.pong)
  if (has_pong()) {
    clear_has_dataBody();
    ::Pong* temp = dataBody_.pong_;
    dataBody_.pong_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Data::set_allocated_pong(::Pong* pong) {
  clear_dataBody();
  if (pong) {
    set_has_pong();
    dataBody_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:Data.pong)
}

inline bool Data::has_dataBody() const {
  return dataBody_case() != DATABODY_NOT_SET;
}
inline void Data::clear_has_dataBody() {
  _oneof_case_[0] = DATABODY_NOT_SET;
}
inline Data::DataBodyCase Data::dataBody_case() const {
  return Data::DataBodyCase(_oneof_case_[0]);
}
inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
// -------------------------------------------------------------------

// Chat

// optional int64 id = 1;
inline void Chat::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Chat::id() const {
  // @@protoc_insertion_point(field_get:Chat.id)
  return id_;
}
inline void Chat::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Chat.id)
}

// optional int64 form = 2;
inline void Chat::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Chat::form() const {
  // @@protoc_insertion_point(field_get:Chat.form)
  return form_;
}
inline void Chat::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Chat.form)
}

// optional int64 to = 3;
inline void Chat::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Chat::to() const {
  // @@protoc_insertion_point(field_get:Chat.to)
  return to_;
}
inline void Chat::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:Chat.to)
}

// optional int32 type = 4;
inline void Chat::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Chat::type() const {
  // @@protoc_insertion_point(field_get:Chat.type)
  return type_;
}
inline void Chat::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Chat.type)
}

// optional .Chat.ChatType chatType = 5;
inline void Chat::clear_chattype() {
  chattype_ = 0;
}
inline ::Chat_ChatType Chat::chattype() const {
  // @@protoc_insertion_point(field_get:Chat.chatType)
  return static_cast< ::Chat_ChatType >(chattype_);
}
inline void Chat::set_chattype(::Chat_ChatType value) {
  
  chattype_ = value;
  // @@protoc_insertion_point(field_set:Chat.chatType)
}

// optional string content = 6;
inline void Chat::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::content() const {
  // @@protoc_insertion_point(field_get:Chat.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.content)
}
inline void Chat::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.content)
}
inline void Chat::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.content)
}
inline ::std::string* Chat::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Chat.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_content() {
  // @@protoc_insertion_point(field_release:Chat.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Chat.content)
}

// optional string ext = 7;
inline void Chat::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::ext() const {
  // @@protoc_insertion_point(field_get:Chat.ext)
  return ext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_ext(const ::std::string& value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Chat.ext)
}
inline void Chat::set_ext(const char* value) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Chat.ext)
}
inline void Chat::set_ext(const char* value, size_t size) {
  
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Chat.ext)
}
inline ::std::string* Chat::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:Chat.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_ext() {
  // @@protoc_insertion_point(field_release:Chat.ext)
  
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    
  } else {
    
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:Chat.ext)
}

inline const Chat* Chat::internal_default_instance() {
  return &Chat_default_instance_.get();
}
// -------------------------------------------------------------------

// Login

// optional int64 id = 1;
inline void Login::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Login::id() const {
  // @@protoc_insertion_point(field_get:Login.id)
  return id_;
}
inline void Login::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Login.id)
}

// optional int64 form = 2;
inline void Login::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Login::form() const {
  // @@protoc_insertion_point(field_get:Login.form)
  return form_;
}
inline void Login::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Login.form)
}

inline const Login* Login::internal_default_instance() {
  return &Login_default_instance_.get();
}
// -------------------------------------------------------------------

// Logout

// optional int64 id = 1;
inline void Logout::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Logout::id() const {
  // @@protoc_insertion_point(field_get:Logout.id)
  return id_;
}
inline void Logout::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Logout.id)
}

// optional int64 form = 2;
inline void Logout::clear_form() {
  form_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Logout::form() const {
  // @@protoc_insertion_point(field_get:Logout.form)
  return form_;
}
inline void Logout::set_form(::google::protobuf::int64 value) {
  
  form_ = value;
  // @@protoc_insertion_point(field_set:Logout.form)
}

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
// -------------------------------------------------------------------

// Ack

// optional int64 msgId = 1;
inline void Ack::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ack::msgid() const {
  // @@protoc_insertion_point(field_get:Ack.msgId)
  return msgid_;
}
inline void Ack::set_msgid(::google::protobuf::int64 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Ack.msgId)
}

// optional int64 from = 2;
inline void Ack::clear_from() {
  from_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ack::from() const {
  // @@protoc_insertion_point(field_get:Ack.from)
  return from_;
}
inline void Ack::set_from(::google::protobuf::int64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:Ack.from)
}

// optional int64 to = 3;
inline void Ack::clear_to() {
  to_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ack::to() const {
  // @@protoc_insertion_point(field_get:Ack.to)
  return to_;
}
inline void Ack::set_to(::google::protobuf::int64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:Ack.to)
}

// optional .Ack.Status status = 4;
inline void Ack::clear_status() {
  status_ = 0;
}
inline ::Ack_Status Ack::status() const {
  // @@protoc_insertion_point(field_get:Ack.status)
  return static_cast< ::Ack_Status >(status_);
}
inline void Ack::set_status(::Ack_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Ack.status)
}

inline const Ack* Ack::internal_default_instance() {
  return &Ack_default_instance_.get();
}
// -------------------------------------------------------------------

// Ping

// optional int64 pingTime = 1;
inline void Ping::clear_pingtime() {
  pingtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ping::pingtime() const {
  // @@protoc_insertion_point(field_get:Ping.pingTime)
  return pingtime_;
}
inline void Ping::set_pingtime(::google::protobuf::int64 value) {
  
  pingtime_ = value;
  // @@protoc_insertion_point(field_set:Ping.pingTime)
}

inline const Ping* Ping::internal_default_instance() {
  return &Ping_default_instance_.get();
}
// -------------------------------------------------------------------

// Pong

// optional int64 pingTime = 1;
inline void Pong::clear_pingtime() {
  pingtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Pong::pingtime() const {
  // @@protoc_insertion_point(field_get:Pong.pingTime)
  return pingtime_;
}
inline void Pong::set_pingtime(::google::protobuf::int64 value) {
  
  pingtime_ = value;
  // @@protoc_insertion_point(field_set:Pong.pingTime)
}

// optional int64 pongTime = 2;
inline void Pong::clear_pongtime() {
  pongtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Pong::pongtime() const {
  // @@protoc_insertion_point(field_get:Pong.pongTime)
  return pongtime_;
}
inline void Pong::set_pongtime(::google::protobuf::int64 value) {
  
  pongtime_ = value;
  // @@protoc_insertion_point(field_set:Pong.pongTime)
}

inline const Pong* Pong::internal_default_instance() {
  return &Pong_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Data_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Data_DataType>() {
  return ::Data_DataType_descriptor();
}
template <> struct is_proto_enum< ::Chat_ChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Chat_ChatType>() {
  return ::Chat_ChatType_descriptor();
}
template <> struct is_proto_enum< ::Ack_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Ack_Status>() {
  return ::Ack_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
